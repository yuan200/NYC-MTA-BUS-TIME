plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'dagger.hilt.android.plugin'
    id "com.google.protobuf" version "0.8.12"
    id "androidx.navigation.safeargs"
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.2"

    def versionPropsFile = file("version.properties")
    def buildNumber

    if (versionPropsFile.canRead()) {
        def versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        buildNumber = versionProps['BUILD_NUMBER'].toInteger()
    } else
        throw new FileNotFoundException("Could not read version.properties")

    buildFeatures {
        dataBinding true
        viewBinding true
        compose true
    }


    defaultConfig {
        applicationId "com.wen.android.mtabuscomparison"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode buildNumber
        versionName "2.07" + "." + buildNumber.toString()
        testInstrumentationRunner "com.wen.android.mtabuscomparison.CustomTestRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true


        javaCompileOptions {
            kapt {
                arguments {
                    arg("room.schemaLocation", "$projectDir/schemas")
                }
            }
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true"]
            }

        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.0.5'
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue 'string', "google_map_api_key", NycMtaBusTime_googleApiKey
            resValue 'string', "mta_bus_api_key", MtaBusApiKey
            resValue 'string', "google_admod_publish_id", GoogleAdPublichId
            resValue 'string', "app_unit_id_stop_monitoring", "ca-app-pub-3940256099942544/6300978111"
            resValue 'string', "app_unit_id_stop_map_top", "ca-app-pub-3940256099942544/6300978111"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue 'string', "google_map_api_key", NycMtaBusTime_googleApiKey
            resValue 'string', "mta_bus_api_key", MtaBusApiKey
            resValue 'string', "google_admod_publish_id", GoogleAdPublichId
            resValue 'string', "app_unit_id_stop_monitoring", StopMonitoringAdUniId
            resValue 'string', "app_unit_id_stop_map_top", StopMapAdUnitid
        }
    }
    // used by Room, to test migrations

    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    ext.autoIncrementBuildNumber = {
        if (versionPropsFile.canRead()) {
            def versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            buildNumber = versionProps['BUILD_NUMBER'].toInteger() + 1
            versionProps['BUILD_NUMBER'] = buildNumber.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else
            throw new FileNotFoundException("Could not read and write version.properties")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            if (project.hasProperty('testFilter')) {
                List<String> props = project.getProperties().get("testFilter").split("\\s+")
                props.each {
                    def replaced = it
                            .replaceFirst("^(MTA-BUS-TIME-COMPARISON/src/test.*/java/)(.+)\$", "**/\$2")
                            .replace(".kt", ".class")
                    project.logger.lifecycle("testFilter File: before=$it, after=$replaced")
                    include(replaced)
                }
            }
        }
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }

    }


    gradle.taskGraph.whenReady {
        taskGraph ->
            def taskReqStr = getGradle().getStartParameter().getTaskRequests().toString()
            if (taskReqStr.contains("assemble")) {
                def taskRelease = ":app:assembleRelease"
                def taskDebug = ":app:assembleDebug"
                if (taskGraph.hasTask(taskRelease) || taskGraph.hasTask(taskDebug)) {
                    autoIncrementBuildNumber()
                }
            }
    }

    lintOptions {
        disable "LogNotTimber",
                "StringFormatInTimber",
                "ThrowableNotAtBeginning",
                "BinaryOperationInTimber",
                "TimberArgCount",
                "TimberArgTypes",
                "TimberTagLength",
                "TimberExceptionLogging"
    }
}
configurations.all {
    resolutionStrategy.force "org.antlr:antlr4-runtime:4.7.1"
    resolutionStrategy.force "org.antlr:antlr4-tool:4.7.1"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'androidx.compose.ui:ui:1.1.0-rc01'
    // Tooling support (Previews, etc.)
    implementation 'androidx.compose.ui:ui-tooling:1.1.0-rc01'
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation 'androidx.compose.foundation:foundation:1.1.0-rc01'
    // Material Design
    implementation 'androidx.compose.material:material:1.1.0-rc01'
    // Material design icons
    implementation 'androidx.compose.material:material-icons-core:1.1.0-rc01'
    implementation 'androidx.compose.material:material-icons-extended:1.1.0-rc01'
    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.4.0'
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0'
    // Integration with observables
    implementation 'androidx.compose.runtime:runtime-livedata:1.1.0-rc01'
    implementation 'androidx.compose.runtime:runtime-rxjava2:1.1.0-rc01'


    def lifecycle_version = '2.4.0'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"



    def nav_version = "2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.6.0-alpha01'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    implementation "androidx.core:core-ktx:1.7.0"

    def play_service_version = "17.0.0"
    implementation "com.google.android.gms:play-services-maps:$play_service_version"
    implementation 'com.google.maps.android:maps-ktx:3.3.0'
    implementation "com.google.android.gms:play-services-places:$play_service_version"
    implementation "com.google.android.gms:play-services-location:$play_service_version"
    implementation "com.google.android.gms:play-services-ads:20.1.0"
    implementation 'com.google.ads.mediation:mopub:5.16.4.0'

    def work_version = "2.7.1"
    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"


    def room_version = '2.4.0'
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    //datastore
    def datastore_version = '1.0.0'
    implementation "androidx.datastore:datastore-preferences:$datastore_version"
    implementation "androidx.datastore:datastore:$datastore_version"
    implementation  "com.google.protobuf:protobuf-javalite:3.10.0"

    //hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    // For instrumented tests.
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    // ...with Kotlin.
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"




    //firebase
    implementation platform('com.google.firebase:firebase-bom:26.4.0')
    implementation 'com.google.firebase:firebase-crashlytics:18.2.6'
    implementation 'com.google.firebase:firebase-analytics:20.0.2'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    //refrofit && okhttp
    // Note: 3.12.+ to support Android API 19


    //HTTP
    def version_okhttp = '5.0.0-alpha.3'
    implementation "com.squareup.okhttp3:okhttp:$version_okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$version_okhttp"
    def version_retrofit = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$version_retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$version_retrofit"
//    testImplementation "com.squareup.retrofit2:retrofit-mock:$version_retrofit"
//    androidTestImplementation "com.squareup.retrofit2:retrofit-$version_retrofit"


    //todo deprecated
    implementation 'com.github.aakira:expandable-layout:1.6.0@aar'

    implementation 'com.google.code.gson:gson:2.8.9'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    androidTestImplementation 'androidx.test:core:1.4.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    implementation 'com.jakewharton.timber:timber:5.0.1'

    //Testing
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.0"
    testImplementation "io.mockk:mockk:1.10.4"

    //Testing coroutines
    def coroutines_test_version = "1.5.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"
    testImplementation 'app.cash.turbine:turbine:0.5.1'

    //testing - jUnit5
    def jupiter_version = '5.8.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$jupiter_version"

    def kotest_version = "4.3.2"
    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
    testImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version"
    testImplementation "io.kotest:kotest-property-jvm:$kotest_version"
    androidTestImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version"
    androidTestImplementation "io.kotest:kotest-property-jvm:$kotest_version"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    androidTestImplementation "androidx.room:room-testing:$room_version"
    kaptAndroidTest "androidx.room:room-testing:$room_version"

    def multidex_version = "2.0.1"
    implementation "androidx.multidex:multidex:$multidex_version"
}

repositories {
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.10.0"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}


